function movie = ltMakeGratingMovie(SinPars,MoviePars,window,reserveflag)% Utility that makes a movie of a drifting sinusoidal grating.%% y = ltMakeGratingMovie(SinPars,MoviePars)% Makes matlab uint8 matrices containing a sine wave drifting grating.%% y = ltMakeGratingMovie(SinPars,MoviePars,Window) % lets you specify a window matrix, with numbers between 0 and 1.% Default = 1 (no window). % It can be an nx x ny matrix (a gaussian, an annulus, etc).% It can be a tensor nx x ny x nt%% y = ltMakeGratingMovie(SinPars,MoviePars,Window,'reserve3')% if you want to reserve the first 3 entries in the lookup table (0 1 and 2).% otherwise it uses 1 and 2 as well.% % SinPars must have fields % Contrast (0 to 1), Orientation (radians), Frequency (cycles/pixel)%% MoviePars must have fields nx, ny, nframes%%% 1999-06 FH % 1999-11 MC% 2000-04 MC added 'reserve3' option% 2000-04 MC suspects that the program has a bug. Frequency may need to be in radians/pixel, or multiply in code% 2000-04 MC decided to fix bug in Frequency by multiply in code% Part of LabToolsif nargin<4	reserveflag = '';endif nargin<3	window = 1;endif ~isfield(SinPars,'Contrast')	SinPars.Contrast = 0.5;	disp('Default assigned')endif ~isfield(SinPars,'Orientation')	SinPars.Orientation = pi/2;	disp('Default assigned')endif ~isfield(SinPars,'Frequency')	SinPars.Frequency = 0.1;		% cycles/pixel	disp('Spatial frequency field was not assigned. Using default.')endif ~isfield(SinPars,'sqwv')	SinPars.sqwv = 0;		% 0 for sinusoid, 1 for square wave	disp('Wave type field was not assigned. Using default.')endif ~isfield(MoviePars,'nframes')	MoviePars.nframes = 16;		endif ~isfield(MoviePars,'nx')	MoviePars.nx = 64;		endif ~isfield(MoviePars,'ny')	MoviePars.ny = 64;		endx = 1-MoviePars.nx/2:MoviePars.nx/2;y = 1-MoviePars.ny/2:MoviePars.ny/2;[xx,yy]=meshgrid(x,y);% angular frequency:angfreq = (cos(SinPars.Orientation).*xx+sin(SinPars.Orientation).*yy)*2*pi*SinPars.Frequency;% I may need a factor of pi in here!% make the movie ------------------------------------------window = SinPars.Contrast * window;movie = cell(MoviePars.nframes,1);for iframe=1:MoviePars.nframes	phase = 2*pi*iframe/MoviePars.nframes;	movieimage = sin(phase + angfreq); % goes bet -1 and 1		if SinPars.sqwv == 1		% it is a square wave		movieimage = 2*((movieimage>0)-1/2);	end	if ndims(window)==2		movieimage = movieimage .* window;	elseif ndims(window)==3		movieimage = movieimage .* squeeze(window(:,:,iframe));	end	if ~strcmp(reserveflag,'reserve3')		movie{iframe} = uint8(round((movieimage+1)*127 + 1)); % bet 1 and 255	else		movie{iframe} = uint8(round((movieimage+1)*126 + 3)); % bet 3 and 255	endend