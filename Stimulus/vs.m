function vs(listenPort)% VS Stimulation server%% VS talks to zpep or mpep through the UDP port and displays stimuli% and plays waves.%% VS(listenPort) lets you specify what port to listen to. DEFAULT: [],% which means 1005 (NB: up to 3 Dec 2013 the port was 1001).%% It relies on RigInfoGet to determine all sorts of attributes of your rig.%% Part of the Stimulus toolbox% 17/7/2019 DS created from tlvs after omitting bindMpepServer    %% Basic configurationclear all %according to PTB suggestion 15/10/20if nargin < 1 || isempty(listenPort)    listenPort = 1005; % used to be 1001endconfirmPort = 1102;pnet('CloseAll'); % to be safe% suppress all the greetings and warningsoldVisualDebugLevel = Screen('Preference', 'VisualDebugLevel', 3);oldSupressAllWarnings = Screen('Preference', 'SuppressAllWarnings', 1);% % % daqreset; % this is important% load and check stimulus directoriesSetDefaultDirs;% if isempty(DIRS.stimInfo) || ~ischar(DIRS.stimInfo)%     error('What is the DIRS.stimInfo?');% end% if ~exist(DIRS.stimInfo,'dir')%     error([DIRS.stimInfo ' is not a directory']);% end%% Initialiseclc;disp('************** VS: Visual and waveform stimulation *********');disp(' ');% wait until all keys are released.while KbCheckendrigInfo = RigInfoGet; % Get this rig's settings% Open a screen and other initializations screenInfo = ScreenInfo(rigInfo);cleanup = onCleanup(@ShowCursor); % put back cursor on completion%HideCursor; % hide the mouse cursor 23/7/20 TEMPORARY% load new gamma table, which linearizes monitor luminancescreenInfo = screenInfo.CalibrationLoad;%screenInfo.Calibration.monitorGamInv(:,1)=0.6*(1:256);%test% Prepare the DAQ for outputsdaqInfo = rigInfo.WaveInfo;if ~isempty(daqInfo.FrameSyncChannel)    % create session for active digital output that echos the sync square state    syncOutSess = daq.createSession(daqInfo.DAQAdaptor);    syncOutSess.Rate = daqInfo.SampleRate;    syncOutSess.addDigitalChannel(daqInfo.DAQString, daqInfo.FrameSyncChannel,...      'OutputOnly');    syncOutSess.outputSingleScan(false); % ensure it's set to false/lowelse    syncOutSess = [];endif ~isempty(daqInfo.DAQAdaptor)    % session for delivering output waveforms, aligned to stimulus onset    waveOutSess = daq.createSession(daqInfo.DAQAdaptor);else    waveOutSess = [];end% TODO: add waveform mode triggered on sync square reading% Warm things upnoSyncSquare = screenInfo.SyncSquare;noSyncSquare.Type = 'Steady';%'None';%1/11/19 % Make an initial stimulus to load relevant instructions in RAMstim = ScreenStim.Make(screenInfo, 'vdriftsin100', [10 20 20 50 30 0 0 200]);% stim.WaveStim.SampleRate = 10000;% stim.WaveStim.Waves = repmat(linspace(0, 1, 1000)', 1, 2);fprintf('Playing a test stimulus twice\n');show(stim, screenInfo, syncOutSess, waveOutSess, noSyncSquare);show(stim, screenInfo, syncOutSess, waveOutSess, noSyncSquare);% Show instructions to usershowinstructions(screenInfo);% Bind stimulus server UDP socketsxsenderPort  = pnet('udpsocket', confirmPort);receiverPort= pnet('udpsocket', listenPort);pnet(senderPort, 'udpconnect', rigInfo.zpepComputerIP, confirmPort);fprintf(1, 'Opened UDP line, awaiting input from zpep (or mpep) on %s\n', ...  rigInfo.zpepComputerName);% Bind data acquisition UDP sockets for Timeline% tlServer = tl.bindMpepServer(listenPort);% Array that will hold the saved stimuli savedStims = ScreenStim;  savedStims(end) = [];% Flags that wil keep track of the stateflag.running 			= 1;flag.stiminitialized 	= 0;flag.stimmake 			= 0;flag.SaveStimulusFiles  = false;% other variablesgrat = []; % this will contain the output of search stim%% Loop until end of exp% ListenChar(2);	% don't echo keypresses to matlab screen% ring = wavread('ringin.wav');% oRingRing = audioplayer([ring; ring], 2*8192);while flag.running    pause(1e-3);		% free up CPU cycles     % check for keyboard input    [ keyIsDown, secs, keyCode] = KbCheck; %#ok<ASGLU>    if keyIsDown 	% a key was pressed                % Erase all stimuli        savedStims = ScreenStim;        savedStims(end) = [];        stim = ScreenStim;                switch find(keyCode, 1);	% if multiple keys pressed, only read the first (smallest) code%             case KbName('s')%                 %                 ListenChar(1);%                 %                 flag.SaveStimulusFiles = ~flag.SaveStimulusFiles;%                 %                 switch flag.SaveStimulusFiles%                     case true%                         fprintf('Starting stimulus saving mode\n');%                         FrameInterval = 1; % input('Enter frame interval (1 to save all frames): ');%                         PixelInterval = 1; % input('Enter pixel interval (1 to save all pixels): ');%                     otherwise%                         fprintf('Stopping stimulus saving mode\n');%                 end%                 %                 showinstructions(screenInfo,grat,flag);% %                 ListenChar(2);%                                    %             case KbName('d')% %                 ListenChar(1);%                 disp('press ALT-Tab to give focus to Matlab');%                 screenInfo.Dist = input('Enter distance between monitor and observer:');%                 showinstructions(screenInfo,grat,flag);%                 ListenChar(2);% %             case KbName('f')% %                 ListenChar(1);% %                 Screen('CloseAll');%                 %                 disp('Change frame rate and press Enter when you are done.');%                 foo = input('','s'); %#ok<NASGU>%                 %                 dist = screenInfo.Dist; % just in case it had been changed%                 screenInfo = ScreenInfo(rigInfo);	% recalculates framerate%                 screenInfo.Dist = dist;   % %                 showinstructions(screenInfo,grat,flag);%                 screenInfo.CalibrationLoad;% %                 flag.stimmake = 0;%                 ListenChar(2);% %             case KbName('g')% %                 grat = SearchStim(screenInfo);%                               %                 visdriftsinpars = round([20 grat.tf grat.sf*10 grat.c grat.ori grat.x grat.y grat.diam]);%                 stim = ScreenStim.Make(screenInfo,'visdriftsin', visdriftsinpars);%                 show(stim, screenInfo, syncOutSess, waveOutSess, noSyncSquare);% %                 showinstructions(screenInfo,grat,flag);% %                 ShowCursor; % why do we want this?            case KbName('Esc') % was 'x'                % leave the program                flag.running = 0;                pnet(senderPort, 'write','goodbye');                pnet(senderPort, 'writePacket'); %             case KbName('t')% %                 ListenChar(1);%                 disp('press ALT-Tab to give focus to Matlab');%                 %                 deadTime = input('Enter dead time before each stimulus (in sec):');%                 ListenChar(2);            otherwise                disp('I do not recognize the key you pressed');        end         flag.stimmake = 0;    end		% if keyIsDown (a key was pressed)        %% Process UDP messages        % Process any UDP messages for Timeline    % tlServer.process();    % Read string from stimulus server sockets    sz = pnet(receiverPort,'readpacket',500,'noblock');    strReceived = pnet(receiverPort,'read',500,char);    strCommand = sscanf(strReceived,'%s',1);        if sz>0        disp(strCommand);    end        switch strCommand        case ''                        % do nothing                    case 'hello'            flag.stiminitialized = 0;            flag.stimmake = 0;            pnet(senderPort, 'write',strReceived);            pnet(senderPort, 'writePacket');                    case 'stiminitialize'            % clear any old stimuli and xfile and get the new xfile name            showinstructions(screenInfo,grat,flag);                        %             if ~isempty(LOADED_TEXTURES)            %                 LOADED_TEXTURES = {};            %                 fprintf('Cleared loaded textures\n');            %             end                        % Erase all stimuli            for istim = 1:length(savedStims)                savedStims(istim) = ScreenStim;            end            stim = ScreenStim; % Initializes            % remove from memory the m-file (of the x-file) and persistent variables            if flag.stiminitialized                clear(eval('xfilename'));            end            xfilename = strReceived(length(strCommand)+2:end-2);            if exist(eval('xfilename'), 'file') == 2                flag.stiminitialized = 1;            else                disp(['No such stimulus file: ' xfilename '.']);                play(oRingRing);            end                        pnet(senderPort, 'write',strReceived);            pnet(senderPort, 'writePacket');        case 'infosave'            % interpret the mpep message to get experiment info            info = dat.mpepMessageParse(strReceived);            % turn the experiment info into paths for 'hw-info' file type            savePaths = dat.expFilePath(info.expRef, 'hw-info');            superSave(savePaths, struct('myScreenInfo', screenInfo));            fprintf('Saved screen info to:\n');            cellfun(@(p) fprintf('''%s''\n', p), savePaths);            % echo the string back            pnet(senderPort, 'write', strReceived);            pnet(senderPort, 'writePacket');        case 'stimmake'		% calls a single specific stimulus            % pulls it from memory if it is there, otherwise creates it from scratch            % texture pointers should be ready after this step             if ~flag.stiminitialized                disp('Cannot stimmake before stiminitialize');                pnet(senderPort, 'write', 'stimproblem');                pnet(senderPort, 'writePacket');            else                                parse_pars = strReceived(length(strCommand) + 2:end);                [NewPars,npars] = sscanf(parse_pars, '%d'); %#ok<NASGU>                                % Check if a stimulus has already been saved                makeTheStimulus = true;                                if ~isempty(stim)                    if length(NewPars)==length(stim.Parameters) && all(NewPars == stim.Parameters)                                               % Easy peasy: requested Stim is equal to last Stim                        makeTheStimulus = false;                                             else                        for iSavedStim = 1:length(savedStims)                            if savedStims(iSavedStim).Matches(xfilename,NewPars)                                               stim = savedStims(iSavedStim);                                makeTheStimulus = false;                            end                        end                    end                end                                                                if makeTheStimulus                                      stim = ScreenStim.Make(screenInfo, xfilename, NewPars);                                  end                % Stim.Show(myScreenInfo); % for debugging purposes                                flag.stimmake = 1;                % success! To confirm this, echo the string back                pnet(senderPort, 'write',strReceived);                pnet(senderPort, 'writePacket');            end        case 'stimhold'            if ~isempty(stim)                                 % first check if stim has already been saved                alreadySaved = false;                for iSavedStim = 1:length(savedStims)                    if savedStims(iSavedStim).Matches(stim.Type,NewPars)                        alreadySaved = true;                    end                end                                if ~alreadySaved,                    % save it                    fprintf('Saving Stim\n');                    savedStims(end+1) = stim; %#ok<AGROW>                end            end            % success! To confirm this,  echo the string back            pnet(senderPort, 'write',strReceived);            pnet(senderPort, 'writePacket');                    case 'stimplay'		% plays a single specific stimulus            if ~flag.stimmake                                disp('Cannot play a stimulus before making it');                pnet(senderPort, 'write','stimproblem');                pnet(senderPort, 'writePacket');                            else                                if ~exist('deadTime','var'), deadTime = 0.0; end                disp(['Waiting ' num2str(deadTime) ' seconds as requested (pre-stimulus)']);                WaitSecs(deadTime);                                 disp('Playing stimulus...');                                MovieName = sprintf('Movie_%s',datestr(now)');                MovieName(strfind(MovieName,':'))='_';                MovieName(strfind(MovieName,' '))='_';                                if ~flag.SaveStimulusFiles                    show(stim, screenInfo, syncOutSess, waveOutSess);                else                    [~, StimMovie] = show(stim, screenInfo, syncOutSess, ...                        waveOutSess,noSyncSquare,[],FrameInterval,PixelInterval);                                        fprintf('Saving the movie...');                    DesktopDir = winqueryreg('HKEY_CURRENT_USER', 'Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders', 'Desktop');                    MovieDir = fullfile(DesktopDir,'StimulusMovies');                    if ~isdir(MovieDir), mkdir(MovieDir); end                    save(fullfile(MovieDir,MovieName),'StimMovie');                    fprintf('done.\n');                end                               % success! To confirm this,  echo the string back                pnet(senderPort, 'write',strReceived);                pnet(senderPort, 'writePacket');                                disp(['Waiting ' num2str(deadTime) ' seconds as requested (post-stimulus)']);                WaitSecs(deadTime);                                showinstructions(screenInfo,grat,flag);                            end        case 'stimshow'            % it "shows" the stimulus, meaning it presents it without turning the sync boxes white and black            if ~flag.stimmake                                disp('Cannot show a stimulus before making it');                pnet(senderPort, 'write','stimproblem');                pnet(senderPort, 'writePacket');            else                disp('showing stimulus...');                                show(stim, screenInfo, syncOutSess, waveOutSess, noSyncSquare)                                % success! To confirm this,  echo the string back                pnet(senderPort, 'write',strReceived);                pnet(senderPort, 'writePacket');            end        case 'stimstop'            % do nothing.             % In principle it would have stopped an ongoing stimulus...                        % echo the string back            pnet(senderPort, 'write',strReceived);            pnet(senderPort, 'writePacket');                    case 'bye'            disp('Bye Bye')            flag.running = 0; % exit program, tidy up..            % echo the string back            pnet(senderPort, 'write',strReceived);            pnet(senderPort, 'writePacket');                        % Restore preferences            Screen('Preference', 'VisualDebugLevel', oldVisualDebugLevel);            Screen('Preference', 'SuppressAllWarnings', oldSupressAllWarnings);        otherwise            fprintf('Received unknown command %s. Ignoring it.\n',strCommand);    endend%% Clean upPriority(0);	% ensure MATLAB process priority level is normalpnet('CloseAll'); Screen('CloseAll');ListenChar(1);			% re-enable echo keypresses to matlab screenShowCursor;function showinstructions(myScreenInfo,grat,flag)% showinstructions% clc;if nargin < 3    flag.SaveStimulusFiles = false;endif nargin < 2    grat = [];enddisp('**************************  tlvs **************************');disp(' ');disp(['Distance is ' num2str(myScreenInfo.Dist) ' cm --- Rate is ' num2str(myScreenInfo.FrameRate,3) ' Hz']);disp(' ');disp('                ESC --- exit');% % disp('                d --- change screen distance');% % disp('                f --- change frame rate');% % disp('                t --- change prestimulus time');% % if flag.SaveStimulusFiles% %     disp('                s --- STOP SAVING STIMULI');% % else% %     disp('                s --- start saving stimuli');    % % end% % disp('                g --- interactive grating');% % disp(' ');disp('*********************************************************');disp(' ');if ~isempty(grat)    fprintf(...        'tf = %2.1f Hz, sf = %2.2f cpd, c = %d %%, ori = %3d deg, x = %2.1f deg, y = %2.1f deg, diam = %2.1f deg\n\n',...        grat.tf/10, grat.sf, grat.c, grat.ori,grat.x/10, grat.y/10, grat.diam/10);end